module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePlaybackControl {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPlaybackControl(data: PlaybackControlCreateInput!): PlaybackControl!
  updatePlaybackControl(data: PlaybackControlUpdateInput!, where: PlaybackControlWhereUniqueInput!): PlaybackControl
  updateManyPlaybackControls(data: PlaybackControlUpdateManyMutationInput!, where: PlaybackControlWhereInput): BatchPayload!
  upsertPlaybackControl(where: PlaybackControlWhereUniqueInput!, create: PlaybackControlCreateInput!, update: PlaybackControlUpdateInput!): PlaybackControl!
  deletePlaybackControl(where: PlaybackControlWhereUniqueInput!): PlaybackControl
  deleteManyPlaybackControls(where: PlaybackControlWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PlaybackControl {
  id: Int!
  sourceIndex: Int
  isPlay: Boolean
  isPause: Boolean
  volumeRange: String
}

type PlaybackControlConnection {
  pageInfo: PageInfo!
  edges: [PlaybackControlEdge]!
  aggregate: AggregatePlaybackControl!
}

input PlaybackControlCreateInput {
  id: Int
  sourceIndex: Int
  isPlay: Boolean
  isPause: Boolean
  volumeRange: String
}

type PlaybackControlEdge {
  node: PlaybackControl!
  cursor: String!
}

enum PlaybackControlOrderByInput {
  id_ASC
  id_DESC
  sourceIndex_ASC
  sourceIndex_DESC
  isPlay_ASC
  isPlay_DESC
  isPause_ASC
  isPause_DESC
  volumeRange_ASC
  volumeRange_DESC
}

type PlaybackControlPreviousValues {
  id: Int!
  sourceIndex: Int
  isPlay: Boolean
  isPause: Boolean
  volumeRange: String
}

type PlaybackControlSubscriptionPayload {
  mutation: MutationType!
  node: PlaybackControl
  updatedFields: [String!]
  previousValues: PlaybackControlPreviousValues
}

input PlaybackControlSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaybackControlWhereInput
  AND: [PlaybackControlSubscriptionWhereInput!]
  OR: [PlaybackControlSubscriptionWhereInput!]
  NOT: [PlaybackControlSubscriptionWhereInput!]
}

input PlaybackControlUpdateInput {
  sourceIndex: Int
  isPlay: Boolean
  isPause: Boolean
  volumeRange: String
}

input PlaybackControlUpdateManyMutationInput {
  sourceIndex: Int
  isPlay: Boolean
  isPause: Boolean
  volumeRange: String
}

input PlaybackControlWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  sourceIndex: Int
  sourceIndex_not: Int
  sourceIndex_in: [Int!]
  sourceIndex_not_in: [Int!]
  sourceIndex_lt: Int
  sourceIndex_lte: Int
  sourceIndex_gt: Int
  sourceIndex_gte: Int
  isPlay: Boolean
  isPlay_not: Boolean
  isPause: Boolean
  isPause_not: Boolean
  volumeRange: String
  volumeRange_not: String
  volumeRange_in: [String!]
  volumeRange_not_in: [String!]
  volumeRange_lt: String
  volumeRange_lte: String
  volumeRange_gt: String
  volumeRange_gte: String
  volumeRange_contains: String
  volumeRange_not_contains: String
  volumeRange_starts_with: String
  volumeRange_not_starts_with: String
  volumeRange_ends_with: String
  volumeRange_not_ends_with: String
  AND: [PlaybackControlWhereInput!]
  OR: [PlaybackControlWhereInput!]
  NOT: [PlaybackControlWhereInput!]
}

input PlaybackControlWhereUniqueInput {
  id: Int
}

type Query {
  playbackControl(where: PlaybackControlWhereUniqueInput!): PlaybackControl
  playbackControls(where: PlaybackControlWhereInput, orderBy: PlaybackControlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaybackControl]!
  playbackControlsConnection(where: PlaybackControlWhereInput, orderBy: PlaybackControlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaybackControlConnection!
  node(id: ID!): Node
}

type Subscription {
  playbackControl(where: PlaybackControlSubscriptionWhereInput): PlaybackControlSubscriptionPayload
}
`
      }
    