// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  playbackControl: (where?: PlaybackControlWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  playbackControl: (
    where: PlaybackControlWhereUniqueInput
  ) => PlaybackControlNullablePromise;
  playbackControls: (args?: {
    where?: PlaybackControlWhereInput;
    orderBy?: PlaybackControlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PlaybackControl>;
  playbackControlsConnection: (args?: {
    where?: PlaybackControlWhereInput;
    orderBy?: PlaybackControlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlaybackControlConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPlaybackControl: (
    data: PlaybackControlCreateInput
  ) => PlaybackControlPromise;
  updatePlaybackControl: (args: {
    data: PlaybackControlUpdateInput;
    where: PlaybackControlWhereUniqueInput;
  }) => PlaybackControlPromise;
  updateManyPlaybackControls: (args: {
    data: PlaybackControlUpdateManyMutationInput;
    where?: PlaybackControlWhereInput;
  }) => BatchPayloadPromise;
  upsertPlaybackControl: (args: {
    where: PlaybackControlWhereUniqueInput;
    create: PlaybackControlCreateInput;
    update: PlaybackControlUpdateInput;
  }) => PlaybackControlPromise;
  deletePlaybackControl: (
    where: PlaybackControlWhereUniqueInput
  ) => PlaybackControlPromise;
  deleteManyPlaybackControls: (
    where?: PlaybackControlWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  playbackControl: (
    where?: PlaybackControlSubscriptionWhereInput
  ) => PlaybackControlSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PlaybackControlOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sourceIndex_ASC"
  | "sourceIndex_DESC"
  | "isPlay_ASC"
  | "isPlay_DESC"
  | "isPause_ASC"
  | "isPause_DESC"
  | "volumeRange_ASC"
  | "volumeRange_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PlaybackControlCreateInput {
  id?: Maybe<Int>;
  sourceIndex?: Maybe<Int>;
  isPlay?: Maybe<Boolean>;
  isPause?: Maybe<Boolean>;
  volumeRange?: Maybe<String>;
}

export interface PlaybackControlUpdateInput {
  sourceIndex?: Maybe<Int>;
  isPlay?: Maybe<Boolean>;
  isPause?: Maybe<Boolean>;
  volumeRange?: Maybe<String>;
}

export interface PlaybackControlWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  sourceIndex?: Maybe<Int>;
  sourceIndex_not?: Maybe<Int>;
  sourceIndex_in?: Maybe<Int[] | Int>;
  sourceIndex_not_in?: Maybe<Int[] | Int>;
  sourceIndex_lt?: Maybe<Int>;
  sourceIndex_lte?: Maybe<Int>;
  sourceIndex_gt?: Maybe<Int>;
  sourceIndex_gte?: Maybe<Int>;
  isPlay?: Maybe<Boolean>;
  isPlay_not?: Maybe<Boolean>;
  isPause?: Maybe<Boolean>;
  isPause_not?: Maybe<Boolean>;
  volumeRange?: Maybe<String>;
  volumeRange_not?: Maybe<String>;
  volumeRange_in?: Maybe<String[] | String>;
  volumeRange_not_in?: Maybe<String[] | String>;
  volumeRange_lt?: Maybe<String>;
  volumeRange_lte?: Maybe<String>;
  volumeRange_gt?: Maybe<String>;
  volumeRange_gte?: Maybe<String>;
  volumeRange_contains?: Maybe<String>;
  volumeRange_not_contains?: Maybe<String>;
  volumeRange_starts_with?: Maybe<String>;
  volumeRange_not_starts_with?: Maybe<String>;
  volumeRange_ends_with?: Maybe<String>;
  volumeRange_not_ends_with?: Maybe<String>;
  AND?: Maybe<PlaybackControlWhereInput[] | PlaybackControlWhereInput>;
  OR?: Maybe<PlaybackControlWhereInput[] | PlaybackControlWhereInput>;
  NOT?: Maybe<PlaybackControlWhereInput[] | PlaybackControlWhereInput>;
}

export interface PlaybackControlUpdateManyMutationInput {
  sourceIndex?: Maybe<Int>;
  isPlay?: Maybe<Boolean>;
  isPause?: Maybe<Boolean>;
  volumeRange?: Maybe<String>;
}

export interface PlaybackControlSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlaybackControlWhereInput>;
  AND?: Maybe<
    | PlaybackControlSubscriptionWhereInput[]
    | PlaybackControlSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PlaybackControlSubscriptionWhereInput[]
    | PlaybackControlSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PlaybackControlSubscriptionWhereInput[]
    | PlaybackControlSubscriptionWhereInput
  >;
}

export type PlaybackControlWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface PlaybackControlPreviousValues {
  id: Int;
  sourceIndex?: Int;
  isPlay?: Boolean;
  isPause?: Boolean;
  volumeRange?: String;
}

export interface PlaybackControlPreviousValuesPromise
  extends Promise<PlaybackControlPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  sourceIndex: () => Promise<Int>;
  isPlay: () => Promise<Boolean>;
  isPause: () => Promise<Boolean>;
  volumeRange: () => Promise<String>;
}

export interface PlaybackControlPreviousValuesSubscription
  extends Promise<AsyncIterator<PlaybackControlPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  sourceIndex: () => Promise<AsyncIterator<Int>>;
  isPlay: () => Promise<AsyncIterator<Boolean>>;
  isPause: () => Promise<AsyncIterator<Boolean>>;
  volumeRange: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregatePlaybackControl {
  count: Int;
}

export interface AggregatePlaybackControlPromise
  extends Promise<AggregatePlaybackControl>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaybackControlSubscription
  extends Promise<AsyncIterator<AggregatePlaybackControl>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlaybackControlSubscriptionPayload {
  mutation: MutationType;
  node: PlaybackControl;
  updatedFields: String[];
  previousValues: PlaybackControlPreviousValues;
}

export interface PlaybackControlSubscriptionPayloadPromise
  extends Promise<PlaybackControlSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlaybackControlPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlaybackControlPreviousValuesPromise>() => T;
}

export interface PlaybackControlSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaybackControlSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaybackControlSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlaybackControlPreviousValuesSubscription>() => T;
}

export interface PlaybackControl {
  id: Int;
  sourceIndex?: Int;
  isPlay?: Boolean;
  isPause?: Boolean;
  volumeRange?: String;
}

export interface PlaybackControlPromise
  extends Promise<PlaybackControl>,
    Fragmentable {
  id: () => Promise<Int>;
  sourceIndex: () => Promise<Int>;
  isPlay: () => Promise<Boolean>;
  isPause: () => Promise<Boolean>;
  volumeRange: () => Promise<String>;
}

export interface PlaybackControlSubscription
  extends Promise<AsyncIterator<PlaybackControl>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  sourceIndex: () => Promise<AsyncIterator<Int>>;
  isPlay: () => Promise<AsyncIterator<Boolean>>;
  isPause: () => Promise<AsyncIterator<Boolean>>;
  volumeRange: () => Promise<AsyncIterator<String>>;
}

export interface PlaybackControlNullablePromise
  extends Promise<PlaybackControl | null>,
    Fragmentable {
  id: () => Promise<Int>;
  sourceIndex: () => Promise<Int>;
  isPlay: () => Promise<Boolean>;
  isPause: () => Promise<Boolean>;
  volumeRange: () => Promise<String>;
}

export interface PlaybackControlConnection {
  pageInfo: PageInfo;
  edges: PlaybackControlEdge[];
}

export interface PlaybackControlConnectionPromise
  extends Promise<PlaybackControlConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaybackControlEdge>>() => T;
  aggregate: <T = AggregatePlaybackControlPromise>() => T;
}

export interface PlaybackControlConnectionSubscription
  extends Promise<AsyncIterator<PlaybackControlConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaybackControlEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaybackControlSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaybackControlEdge {
  node: PlaybackControl;
  cursor: String;
}

export interface PlaybackControlEdgePromise
  extends Promise<PlaybackControlEdge>,
    Fragmentable {
  node: <T = PlaybackControlPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaybackControlEdgeSubscription
  extends Promise<AsyncIterator<PlaybackControlEdge>>,
    Fragmentable {
  node: <T = PlaybackControlSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "PlaybackControl",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
